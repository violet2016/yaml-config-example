// Code generated by "enumer -type=SendingIntervalPolicy -yaml"; DO NOT EDIT.

//
package main

import (
	"fmt"
)

const _SendingIntervalPolicyName = "FixedTimeGradualIncreaseDoNotBotherMeAgain"

var _SendingIntervalPolicyIndex = [...]uint8{0, 9, 24, 42}

func (i SendingIntervalPolicy) String() string {
	i -= 1
	if i < 0 || i >= SendingIntervalPolicy(len(_SendingIntervalPolicyIndex)-1) {
		return fmt.Sprintf("SendingIntervalPolicy(%d)", i+1)
	}
	return _SendingIntervalPolicyName[_SendingIntervalPolicyIndex[i]:_SendingIntervalPolicyIndex[i+1]]
}

var _SendingIntervalPolicyValues = []SendingIntervalPolicy{1, 2, 3}

var _SendingIntervalPolicyNameToValueMap = map[string]SendingIntervalPolicy{
	_SendingIntervalPolicyName[0:9]:   1,
	_SendingIntervalPolicyName[9:24]:  2,
	_SendingIntervalPolicyName[24:42]: 3,
}

// SendingIntervalPolicyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SendingIntervalPolicyString(s string) (SendingIntervalPolicy, error) {
	if val, ok := _SendingIntervalPolicyNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SendingIntervalPolicy values", s)
}

// SendingIntervalPolicyValues returns all values of the enum
func SendingIntervalPolicyValues() []SendingIntervalPolicy {
	return _SendingIntervalPolicyValues
}

// IsASendingIntervalPolicy returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SendingIntervalPolicy) IsASendingIntervalPolicy() bool {
	for _, v := range _SendingIntervalPolicyValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalYAML implements a YAML Marshaler for SendingIntervalPolicy
func (i SendingIntervalPolicy) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for SendingIntervalPolicy
func (i *SendingIntervalPolicy) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = SendingIntervalPolicyString(s)
	return err
}
